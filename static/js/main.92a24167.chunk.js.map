{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["styles","appContainer","margin","height","buttonContainer","display","marginBottom","mainContainer","editorContainer","marginRight","width","displayContainer","marginLeft","App","useState","fileData","setFileData","fileName","setFileName","editor","setEditor","baseURL","style","placeholder","onChange","e","target","value","onClick","console","log","axios","post","content","then","res","get","data","body","setData","onReady","ClassicEditor","getData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAiEMA,EAAS,CACbC,aAAc,CACZC,OAAQ,GACRC,OAAQ,SAEVC,gBAAiB,CACfC,QAAS,OACTC,aAAc,IAEhBC,cAAe,CACbF,QAAS,QAEXG,gBAAiB,CACfC,YAAa,GACbC,MAAO,MACPP,OAAQ,QAEVQ,iBAAkB,CAChBC,WAAY,GACZF,MAAO,QAIIG,EAnFH,WACV,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA4BJ,mBAAS,MAArC,mBAAOK,EAAP,KAAeC,EAAf,KAEMC,EACJ,mEAyBF,OACE,sBAAKC,MAAOtB,EAAOC,aAAnB,UACE,sBAAKqB,MAAOtB,EAAOI,gBAAnB,UACE,0BACEmB,YAAY,kBACZC,SAAU,SAACC,GACTP,EAAYO,EAAEC,OAAOC,UAGzB,wBAAQC,QA5BK,WACjBC,QAAQC,IAAI,iBAAmBb,GAC/Bc,IACGC,KADH,UACWX,EADX,kBAC4BJ,GAAY,CACpCgB,QAASlB,IAEVmB,MAAK,SAACC,GACLN,QAAQC,IAAIK,OAqBZ,yBACA,wBAAQP,QAlBE,WACdC,QAAQC,IAAI,gBAAkBb,GAC9Bc,IAAMK,IAAN,UAAaf,EAAb,kBAA8BJ,IAAYiB,MAAK,SAACC,GAC9CN,QAAQC,IAAIK,EAAIE,KAAKC,MACrBnB,EAAOoB,QAAQJ,EAAIE,KAAKC,UActB,yBAEF,sBAAKhB,MAAOtB,EAAOO,cAAnB,UACE,qBAAKe,MAAOtB,EAAOQ,gBAAnB,SACE,cAAC,WAAD,CACEgC,QAAS,SAACrB,GACRU,QAAQC,IAAI,mBACZV,EAAUD,IAEZA,OAAQsB,IACRjB,SA3CmB,SAACC,EAAGN,GAC/BH,EAAYG,EAAOuB,gBA6Cf,qBAAKpB,MAAOtB,EAAOW,iBAAnB,SAAsCI,WC/C/B4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.92a24167.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n\nconst App = () => {\n  const [fileData, setFileData] = useState('');\n  const [fileName, setFileName] = useState('');\n  const [editor, setEditor] = useState(null);\n\n  const baseURL =\n    'https://ipchgmr3va.execute-api.ap-southeast-2.amazonaws.com/prod';\n\n  const handleOnEditorChange = (e, editor) => {\n    setFileData(editor.getData());\n  };\n\n  const createFile = () => {\n    console.log('Creating file ' + fileName);\n    axios\n      .post(`${baseURL}/?name=${fileName}`, {\n        content: fileData,\n      })\n      .then((res) => {\n        console.log(res);\n      });\n  };\n\n  const getFile = () => {\n    console.log('Getting file ' + fileName);\n    axios.get(`${baseURL}/?name=${fileName}`).then((res) => {\n      console.log(res.data.body);\n      editor.setData(res.data.body);\n    });\n  };\n\n  return (\n    <div style={styles.appContainer}>\n      <div style={styles.buttonContainer}>\n        <textarea\n          placeholder='Enter file name'\n          onChange={(e) => {\n            setFileName(e.target.value);\n          }}\n        />\n        <button onClick={createFile}>Create file</button>\n        <button onClick={getFile}>Get file</button>\n      </div>\n      <div style={styles.mainContainer}>\n        <div style={styles.editorContainer}>\n          <CKEditor\n            onReady={(editor) => {\n              console.log('Editor is ready');\n              setEditor(editor);\n            }}\n            editor={ClassicEditor}\n            onChange={handleOnEditorChange}\n          />\n        </div>\n        <div style={styles.displayContainer}>{fileData}</div>\n      </div>\n    </div>\n  );\n};\n\nconst styles = {\n  appContainer: {\n    margin: 20,\n    height: '100vh',\n  },\n  buttonContainer: {\n    display: 'flex',\n    marginBottom: 20,\n  },\n  mainContainer: {\n    display: 'flex',\n  },\n  editorContainer: {\n    marginRight: 10,\n    width: '50%',\n    height: '100%',\n  },\n  displayContainer: {\n    marginLeft: 10,\n    width: '50%',\n  },\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}